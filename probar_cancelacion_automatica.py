#!/usr/bin/env python
"""
Script para probar la funcionalidad de cancelaci√≥n autom√°tica de alquileres futuros
cuando un alquiler se vuelve adeudado.
"""
import os
import sys
import django
from datetime import date, timedelta

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'DjangoProject1.settings')
django.setup()

from maquinas.models import Alquiler, MaquinaBase, Unidad
from persona.models import Persona
from persona.views import procesar_alquileres_vencidos_automatico

def limpiar_datos_prueba():
    """Limpiar alquileres de prueba anteriores"""
    # Eliminar alquileres de prueba (que tengan observaciones espec√≠ficas)
    Alquiler.objects.filter(
        observaciones_cancelacion__icontains="PRUEBA CANCELACI√ìN AUTOM√ÅTICA"
    ).delete()
    
    # Restablecer unidades a disponible
    Unidad.objects.filter(estado__in=['adeudado', 'mantenimiento']).update(estado='disponible')
    
    print("üßπ Datos de prueba limpiados")

def crear_escenario_prueba():
    """Crear escenario de prueba con alquiler vencido y alquileres futuros"""
    
    print("\nüîß CREANDO ESCENARIO DE PRUEBA")
    print("="*50)
    
    # Buscar una m√°quina base y unidad
    maquina_base = MaquinaBase.objects.first()
    if not maquina_base:
        print("‚ùå No hay m√°quinas base disponibles")
        return None
    
    unidad = Unidad.objects.filter(
        maquina_base=maquina_base, 
        estado='disponible'
    ).first()
    if not unidad:
        print("‚ùå No hay unidades disponibles")
        return None
    
    # Buscar personas para los alquileres
    personas = list(Persona.objects.filter(es_empleado=False)[:4])  # Necesitamos 4 personas
    if len(personas) < 4:
        print("‚ùå No hay suficientes personas para la prueba")
        return None
    
    fecha_actual = date.today()
    
    # 1. Crear alquiler VENCIDO (en_curso que ya pas√≥ su fecha de fin)
    alquiler_vencido = Alquiler.objects.create(
        maquina_base=maquina_base,
        unidad=unidad,
        persona=personas[0],
        fecha_inicio=fecha_actual - timedelta(days=3),  # Empez√≥ hace 3 d√≠as
        fecha_fin=fecha_actual - timedelta(days=1),     # Termin√≥ ayer
        estado='en_curso',  # Est√° en curso pero ya venci√≥
        metodo_pago='mercadopago',
        monto_total=maquina_base.precio_por_dia * 2,
        observaciones_cancelacion="PRUEBA CANCELACI√ìN AUTOM√ÅTICA - VENCIDO"
    )
    
    print(f"‚úÖ Alquiler VENCIDO creado: {alquiler_vencido.numero}")
    print(f"   - Cliente: {alquiler_vencido.persona.nombre} {alquiler_vencido.persona.apellido}")
    print(f"   - Unidad: {alquiler_vencido.unidad.patente}")
    print(f"   - Fecha fin: {alquiler_vencido.fecha_fin} (hace {(fecha_actual - alquiler_vencido.fecha_fin).days} d√≠as)")
    print(f"   - Estado: {alquiler_vencido.estado}")
    
    # 2. Crear alquileres FUTUROS de la misma unidad
    alquileres_futuros = []
    
    # Alquiler futuro 1: Ma√±ana
    futuro_1 = Alquiler.objects.create(
        maquina_base=maquina_base,
        unidad=unidad,
        persona=personas[1],
        fecha_inicio=fecha_actual + timedelta(days=1),
        fecha_fin=fecha_actual + timedelta(days=3),
        estado='reservado',
        metodo_pago='mercadopago',
        monto_total=maquina_base.precio_por_dia * 3,
        observaciones_cancelacion="PRUEBA CANCELACI√ìN AUTOM√ÅTICA - FUTURO 1"
    )
    alquileres_futuros.append(futuro_1)
    
    # Alquiler futuro 2: Pr√≥xima semana
    futuro_2 = Alquiler.objects.create(
        maquina_base=maquina_base,
        unidad=unidad,
        persona=personas[2],
        fecha_inicio=fecha_actual + timedelta(days=7),
        fecha_fin=fecha_actual + timedelta(days=9),
        estado='reservado',
        metodo_pago='mercadopago',
        monto_total=maquina_base.precio_por_dia * 3,
        observaciones_cancelacion="PRUEBA CANCELACI√ìN AUTOM√ÅTICA - FUTURO 2"
    )
    alquileres_futuros.append(futuro_2)
    
    # Alquiler futuro 3: Pr√≥ximo mes
    futuro_3 = Alquiler.objects.create(
        maquina_base=maquina_base,
        unidad=unidad,
        persona=personas[3],
        fecha_inicio=fecha_actual + timedelta(days=30),
        fecha_fin=fecha_actual + timedelta(days=32),
        estado='reservado',
        metodo_pago='mercadopago',
        monto_total=maquina_base.precio_por_dia * 3,
        observaciones_cancelacion="PRUEBA CANCELACI√ìN AUTOM√ÅTICA - FUTURO 3"
    )
    alquileres_futuros.append(futuro_3)
    
    print(f"\n‚úÖ {len(alquileres_futuros)} alquileres FUTUROS creados:")
    for i, alquiler in enumerate(alquileres_futuros, 1):
        print(f"   {i}. {alquiler.numero}: {alquiler.persona.nombre} {alquiler.persona.apellido}")
        print(f"      - Fechas: {alquiler.fecha_inicio} - {alquiler.fecha_fin}")
        print(f"      - Estado: {alquiler.estado}")
        print(f"      - Monto: ${alquiler.monto_total}")
    
    return {
        'alquiler_vencido': alquiler_vencido,
        'alquileres_futuros': alquileres_futuros,
        'unidad': unidad
    }

def ejecutar_prueba():
    """Ejecutar la prueba completa"""
    
    print("\nüöÄ EJECUTANDO PRUEBA DE CANCELACI√ìN AUTOM√ÅTICA")
    print("="*60)
    
    # Limpiar datos anteriores
    limpiar_datos_prueba()
    
    # Crear escenario de prueba
    escenario = crear_escenario_prueba()
    if not escenario:
        print("‚ùå No se pudo crear el escenario de prueba")
        return
    
    alquiler_vencido = escenario['alquiler_vencido']
    alquileres_futuros = escenario['alquileres_futuros']
    unidad = escenario['unidad']
    
    # Verificar estado ANTES del procesamiento
    print(f"\nüìä ESTADO ANTES DEL PROCESAMIENTO:")
    print(f"   - Alquiler vencido: {alquiler_vencido.numero} ({alquiler_vencido.estado})")
    print(f"   - Unidad: {unidad.patente} ({unidad.estado})")
    print(f"   - Alquileres futuros: {len(alquileres_futuros)} en estado reservado")
    
    # EJECUTAR EL PROCESAMIENTO AUTOM√ÅTICO
    print(f"\n‚öôÔ∏è  PROCESANDO ALQUILERES VENCIDOS...")
    procesados = procesar_alquileres_vencidos_automatico()
    print(f"   - Alquileres procesados: {procesados}")
    
    # Verificar estado DESPU√âS del procesamiento
    print(f"\nüìä ESTADO DESPU√âS DEL PROCESAMIENTO:")
    
    # Recargar objetos desde la base de datos
    alquiler_vencido.refresh_from_db()
    unidad.refresh_from_db()
    
    print(f"   - Alquiler vencido: {alquiler_vencido.numero} ({alquiler_vencido.estado}) ‚úÖ")
    print(f"   - Unidad: {unidad.patente} ({unidad.estado}) ‚úÖ")
    
    # Verificar alquileres futuros
    alquileres_cancelados = 0
    for alquiler in alquileres_futuros:
        alquiler.refresh_from_db()
        if alquiler.estado == 'cancelado':
            alquileres_cancelados += 1
            print(f"   - {alquiler.numero}: {alquiler.estado} ‚úÖ (Reembolso: {alquiler.porcentaje_reembolso}%)")
        else:
            print(f"   - {alquiler.numero}: {alquiler.estado} ‚ùå")
    
    # Resultado final
    print(f"\nüéØ RESULTADO:")
    if alquiler_vencido.estado == 'adeudado' and unidad.estado == 'adeudado' and alquileres_cancelados == len(alquileres_futuros):
        print("‚úÖ ¬°PRUEBA EXITOSA! La cancelaci√≥n autom√°tica funciona correctamente.")
        print(f"   - Alquiler vencido marcado como 'adeudado' ‚úÖ")
        print(f"   - Unidad marcada como 'adeudado' ‚úÖ")
        print(f"   - {alquileres_cancelados}/{len(alquileres_futuros)} alquileres futuros cancelados ‚úÖ")
        print(f"   - Emails de cancelaci√≥n enviados a los clientes ‚úÖ")
    else:
        print("‚ùå PRUEBA FALLIDA. Verificar la l√≥gica de cancelaci√≥n autom√°tica.")
        print(f"   - Alquiler vencido: {alquiler_vencido.estado} (esperado: adeudado)")
        print(f"   - Unidad: {unidad.estado} (esperado: adeudado)")
        print(f"   - Alquileres cancelados: {alquileres_cancelados}/{len(alquileres_futuros)}")

if __name__ == "__main__":
    ejecutar_prueba() 