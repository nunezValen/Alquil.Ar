"""
Django settings for DjangoProject1 project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from pyngrok import ngrok, conf

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-c_&j0lq^_c0)hv5%n_rm1y)$+%us1m@2j!j1!1g8e)2^=(3qez'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['localhost', '127.0.0.1', '.ngrok.io', '.ngrok-free.app']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'persona',
    'widget_tweaks',
    'maquinas',
    'sucursales',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'persona.middleware.RequestMiddleware',
]

# Configuración de mensajes
MESSAGE_STORAGE = 'django.contrib.messages.storage.session.SessionStorage'

from django.contrib.messages import constants as message_constants
MESSAGE_TAGS = {
    message_constants.DEBUG: 'debug',
    message_constants.INFO: 'info',
    message_constants.SUCCESS: 'success',
    message_constants.WARNING: 'warning',
    message_constants.ERROR: 'danger',
}

# Configuración de sesiones
SESSION_EXPIRE_AT_BROWSER_CLOSE = True  # La sesión expira al cerrar el navegador
SESSION_COOKIE_AGE = 43200  # 12 horas en segundos
SESSION_SAVE_EVERY_REQUEST = True  # Actualiza la cookie de sesión en cada request

ROOT_URLCONF = 'DjangoProject1.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'persona.views.empleados_processor',
            ],
        },
    },
]

WSGI_APPLICATION = 'DjangoProject1.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Configuración de archivos multimedia
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Configuración de CSRF y sesiones
CSRF_TRUSTED_ORIGINS = [
    'https://nearby-cat-mildly.ngrok-free.app',
    'http://localhost:8000',
    'http://127.0.0.1:8000',
    'https://*.ngrok-free.app'
]
CSRF_COOKIE_SECURE = False
SESSION_COOKIE_SECURE = False

# Configuración de login
LOGIN_URL = 'persona:login_unificado2'
LOGIN_REDIRECT_URL = '/persona/catalogo/'
LOGOUT_REDIRECT_URL = '/persona/login/'

# Configuración de APIs de pago
MERCADOPAGO_PUBLIC_KEY = 'APP_USR-4b4258c9-acf2-4e22-8586-b90a515a544e'
MERCADOPAGO_ACCESS_TOKEN = 'APP_USR-7053661504074875-052821-12dcd00682fb1fc064c283d1929e2ce2-343205143'
MERCADOPAGO_CLIENT_ID = '7053661504074875'
MERCADOPAGO_CLIENT_SECRET = 'dgkDfbZ7xBJE0DP8kXV2YnJHzQCRcQ7T'
BINANCE_API_KEY = 'TU_API_KEY'
BINANCE_API_SECRET = 'TU_API_SECRET'

# Configuración de correo electrónico
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'contacto.alquilar@gmail.com'
EMAIL_HOST_PASSWORD = 'ulwc rybt birv dqfg'
DEFAULT_FROM_EMAIL = 'Alquil.ar <no-reply@alquilar.com.ar>'

# Configuración de ngrok
NGROK_URL = 'https://nearby-cat-mildly.ngrok-free.app'
NGROK_PORT = 8000

try:
    from pyngrok import ngrok, conf
    
    # Configurar el token de autenticación
    ngrok.set_auth_token('2uyTAlh8cddAMkkwfvQz9dVQTMU_658cQYhnPUBoK9gXuSjEX')
    
    # Configurar el puerto
    ngrok_port = 8000  # Mismo puerto donde corre Django
    
    # Cerrar cualquier túnel existente
    ngrok.kill()
    
    # Configurar opciones de ngrok
    conf.get_default().monitor_thread = False
    conf.get_default().console_ui = False
    
    # Crear nuevo túnel especificando el puerto correcto
    public_url = ngrok.connect(addr=f"http://localhost:{ngrok_port}").public_url
    print(f' * ngrok tunnel "{public_url}" -> http://localhost:{ngrok_port}/')
    
    # Agregar la URL de ngrok a ALLOWED_HOSTS y CSRF_TRUSTED_ORIGINS
    if public_url:
        ngrok_host = public_url.replace('https://', '').replace('http://', '')
        ALLOWED_HOSTS.append(ngrok_host)
        CSRF_TRUSTED_ORIGINS.append(f'https://{ngrok_host}')
except Exception as e:
    print(f' * Error al iniciar ngrok: {str(e)}')
    print(' * Continuando sin ngrok...')
    public_url = None
